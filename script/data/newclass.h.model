#pragma once

__parentInclude__

#include <memory>

__namespaceOpen__

class __className__;
using __className__Ptr       = std::shared_ptr< __className__ >;
using Const__className__Ptr  = std::shared_ptr< const __className__ >;
using __className__WPtr      = std::weak_ptr< __className__ >;
using Const__className__WPtr = std::weak_ptr< const __className__ >;
using __className__UPtr      = std::unique_ptr< __className__ >;
using Const__className__UPtr = std::unique_ptr< const __className__ >;


class __className____parentClassInherit__
{
public:
    __className__()__defDefault__;
    __className__( const __className__& other )__defDefault__;
    __className__( __className__&& source )__defDefault__;

    virtual ~__className__()__defDefault__;

    __className__& operator=( const __className__& other )__defDefault__;
    __className__& operator=( __className__&& source )__defDefault__;

    bool operator==( const __className__& other ) const__defDefault__;
protected:
private:
};

__namespaceClose__
